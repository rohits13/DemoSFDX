#!groovy
import groovy.json.JsonSlurperClassic
node {
	
    def BUILD_NUMBER = env.BUILD_NUMBER
    def RUN_ARTIFACT_DIR = "tests/${BUILD_NUMBER}"
    def SFDC_USERNAME
    def SFDC_HOST
    def HUB_ORG
    def CONNECTED_APP_CONSUMER_KEY
    def JWT_KEY_CRED_ID = env.JWT_CRED_ID_DH
    def SFDC_ORG = env.SFDC_ORG
    def toolbelt = tool 'toolbelt'
    def rc

    stage('Checkout Source') {
        // when running in multi-branch job, one must issue this command
        checkout scm      
    }

    withCredentials([file(credentialsId: JWT_KEY_CRED_ID, variable: 'jwt_key_file')]) {  
        
	stage('Authorization Org') {
	    if(SFDC_ORG == 'QA') {
		SFDC_HOST = 'https://test.salesforce.com'
		HUB_ORG = 'rohit.shrivastava@novozymes.com.qa'
		CONNECTED_APP_CONSUMER_KEY = '3MVG9N6eDmZRVJOksVBR_v3IoiT1Y2Ojxcb4cvMFwD2evbg2EGQao0PdRYAchcGBozKu68fwRxrGG3nWwiHa2'		    
	    }
	    else if(SFDC_ORG == 'SIT') {
		SFDC_HOST = 'https://test.salesforce.com'
		HUB_ORG = 'rohit.shrivastava@novozymes.com.sit'
		CONNECTED_APP_CONSUMER_KEY = '3MVG9rnryk9FxFMV4sDS2gmhxHi_L9nFJLjFNVTUSxbo_T1PfArDt3wa6j_lq_qsbXb539ME7CV.CSFUTbLW_'		    
	    }
		
	    println 'KEY IS' 
	    println SFDC_ORG
	    println SFDC_HOST
	    println HUB_ORG
	    println CONNECTED_APP_CONSUMER_KEY
	    println JWT_KEY_CRED_ID
		
            if (isUnix()) {
		println JWT_KEY_CRED_ID
		rc = sh returnStatus: true, script: "${toolbelt} force:auth:jwt:grant --clientid ${CONNECTED_APP_CONSUMER_KEY} --username ${HUB_ORG} --jwtkeyfile ${jwt_key_file} --setdefaultusername --instanceurl ${SFDC_HOST}"
            }else{	      
                rc = bat returnStatus: true, script: "\"${toolbelt}\" force:auth:jwt:grant --clientid ${CONNECTED_APP_CONSUMER_KEY} --username ${HUB_ORG} --jwtkeyfile \"${jwt_key_file}\"  --setdefaultusername --instanceurl ${SFDC_HOST}"
	    }
            if (rc != 0) { error 'hub org authorization failed' }
	        println rc		
	 }
	    
      	stage('Validate') {
	  if (isUnix()) {
		 sh "${toolbelt} force:source:convert --rootdir force-app --outputdir tmp_convert"
		 sh "zip -r unpackaged.zip tmp_convert"
		 sh "rm -r tmp_convert"
		 rmsg = sh returnStdout: true, script: "${toolbelt} force:mdapi:deploy --checkonly --zipfile unpackaged.zip --targetusername ${HUB_ORG} -w 10"
		
	   }else{
		 bat "\"${toolbelt}\" force:source:convert --rootdir force-app --outputdir tmp_convert"
		 bat "jar -cfM unpackaged.zip tmp_convert"
		 bat "del /s /f /q tmp_convert"
	         rmsg = bat returnStdout: true, script: "\"${toolbelt}\" force:mdapi:deploy --checkonly --zipfile unpackaged.zip --targetusername ${HUB_ORG} -w 10"
	  }
	    println(rmsg)
	}
       
    }
}
